name: "Verify CLA"
on:
  workflow_call:
jobs:
  verify-cla:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        
      - name: Parse Extracted Authors
        env:
         GH_TOKEN: ${{ github.token }}
        uses: actions/github-script@v7.0.1
        id: parse_authors
        with:
          script: |
            try {
              const commits = await github.request('GET /repos/${{github.repository }}/pulls/${{ github.event.number }}/commits', {
                headers: {
                  'Accept': 'application/json'
                }
              })
              //uncomment for debugging, but not in production
              //console.log("Received commits " + JSON.stringify(commits["data"]))
              var involved_authors = []
              var missingAuthors = null
              for(const commit of commits.data) {
                if (commit.author == null) {
                  missingAuthors += ("❌ Cannot get author of commit " commit.sha +". Please make sure that your email in yout commit matches a verified email associated with your github account!")
                  missingAuthrors += "\n"
                }
              }
              if(missingAuthrors!=null) {
                core.error(missingAuthors)
                core.setFailed(missingAuthors)
              }
              for(const commit of commits.data) {
                const author = commit.author.login
                if (author === undefined) {
                  const authorFail = "Commit " +commit.sha+" does not have a committer with a github user. Cannot check CLA requirement!"
                  core.error(authorFail)
                  core.setFailed(authorFail)
                }
                console.log(commit.sha + " has author login name " + author)
                if(! involved_authors.includes(author)) involved_authors.push(author)
              }
              console.log("PR ${{ github.event.number }} was authored by " + involved_authors)
            } catch(err) {
              core.error("Error while reading or parsing the JSON")
              core.setFailed(err)
            }
            return involved_authors

      - name: Match Authors
        uses: actions/github-script@v7.0.1
        id: check
        with:
          result-encoding: string
          script: |
            try {
              const authors = JSON.parse(`${{ steps.parse_authors.outputs.result }}`)
              const whitelist = await github.request("https://raw.githubusercontent.com/a-sit-plus/contributors/main/contributors.json")
              if(whitelist.status != 200) {
                core.error("Error while fetching contributor whitelist. status: "+ whitelist.status)
                core.setFailed(whitelist.status)
              }
              var str="Thank you for your contribution! Unfortunately, we cannot yet review this PR because\n"
              var fail=false
              for (i in authors){
                if(!whitelist.data.includes(authors[i])){
                  fail=true
                  str+="  * @"+authors[i]+" has yet to sign the CLA ❌\n"
                }
              }
              if(fail) {
                str+="\nTo proceed, please download and fill out the [A-SIT Plus Contributor Licence Agreement](https://a-sit-plus.github.io/ASP_CLA.pdf) (CLA). Either print, sign and scan it or (preferably) use an eIDAS-compliant qualified electronic signature. When done, send it to opensource@a-sit.at.  "
                str+="\nInformation on the processing of your personal data can be found in the [A-SIT Plus privacy policy](https://a-sit-plus.github.io/ASP_Privacy.pdf)."
                str+="\nBe sure to carefully read it and only sign the CLA if you accept the terms of this privacy policy! (Don't worry, it's a light read!)"
                str+="  \nSee also CONTRIBUTING.md in this repository to revisit contribution guidelines, the CLA signing requirement, and our privacy policy."
              } else {
                str="🟢 All authors have signed the CLA"
              }
            } catch(err) {
              core.error("Error while reading or parsing the JSON")
              core.setFailed(err)
            }
            return str
      - name: Add Summary
        run: echo -e "### CLA Check\n ${{ steps.check.outputs.result }}" >> $GITHUB_STEP_SUMMARY
      - name: isSuccess
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const str = `${{ steps.check.outputs.result }}`
            if(str != "🟢 All authors have signed the CLA") {
              core.error(str)
              core.setFailed(str)
            }
          
